# -*- coding: utf-8 -*-
"""disney.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17dTj2QTAPeAAbFBVqLKSoNgrJ4ui63AT
"""

#-------------- FirstStep: creating our dataframe -------------------------------------#

import quandl, math, datetime
import numpy as np
import pandas as pd
from sklearn import preprocessing, svm #model_selection is the new cross_validation
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split #model_selection is the new cross_validation and we use the train_test_split for training and testing ou data
import matplotlib.pyplot as plt
from matplotlib import style

style.use('ggplot')

qf = pd.DataFrame()

df = quandl.get("EOD/DIS", authtoken="6va5u4QAQ-tKz5Pq6s9V")

df['Daily_Change'] = (df['Adj_Close'] - df['Adj_Open'])/df['Adj_Open'] * 100.0
#this is how much the stock changes in a period of one day

df['volatility'] = (df['Adj_High'] - df['Adj_Low'])/df['Adj_Low'] * 100.0
#this is a brute definition of volatility

df = df[['Adj_Close', 'Daily_Change', 'volatility', 'Adj_Volume']]
#here we put only what we need in our dataframe

#df.head()

#-------------- SecondStep: creating our labels and features for forecast -------------------------------------#

forecast = 'Adj_Close' #what we want to predict
df.fillna(value=-99999, inplace=True) #NaN data
forecast_out = int(math.ceil(0.01 * len(df))) #this is 11
qf['comparing'] = df[forecast][-forecast_out:]
df['label'] = df[forecast].shift(-forecast_out) # our label: it is our forecast column('Adj_Close') but without the last 11 rows

X = np.array(df.drop(['label'], 1)) # our features that is all the current data except for the label column [(1) is for columns]... it could also be X = np.array(df.drop(['label'], "column"))
X = preprocessing.scale(X) #preprocessing turns your data in a range -1 to 1.
X_lately = X[-forecast_out:]
X = X[:-forecast_out]

df.dropna(inplace=True)

y = np.array(df['label'])

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)
#train_test_split : Split arrays or matrices into random train and test subsets
#The return here is the training set of features, testing set of features, training set of labels, and testing set of labels.

#-------------- ThirdStep: define the classifier and training/testing-------------------------------------#

clf = LinearRegression()

clf.fit(X_train, y_train)#fit is for training
#Here, we're "fitting" our training features and training labels.
testing_trust = clf.score(X_test, y_test)#score is for testing

#testing_trust = 0.9401696116443349

forecast_set = clf.predict(X_lately) # here wee predict with unseen data

df['Forecast'] = np.nan

#-------------- FourthStep: hardcoding the datatime in forecast_set-------------------------------------#

last_date = df.iloc[-1].name
last_unix = last_date.timestamp()
one_day = 86400
next_unix = last_unix + one_day

for i in forecast_set:
    next_date = datetime.datetime.fromtimestamp(next_unix)
    next_unix += 86400
    df.loc[next_date] = [np.nan for _ in range(len(df.columns)-1)]+[i]

#-------------- LastStep: Plot -------------------------------------#

df['Adj_Close'].plot()
df['Forecast'].plot()
qf['comparing'].plot()
plt.legend(loc=4)
plt.xlabel('Date')
plt.ylabel('Price')
plt.show()
